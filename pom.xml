<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>cn.cc</groupId>
    <artifactId>OneForAll</artifactId>
    <version>0.0.1-SNAPSHOT</version>
    <name>OneForAll</name>
    <description>常用的小功能</description>

    <!-- 菜鸟教程 文档 -->
    <!-- https://www.runoob.com/maven/maven-pom.html -->

    <!-- 版本升级会有很多冲突，暂时不会 -->

    <!-- 虽然想 -->
    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>2.2.6.RELEASE</version>
        <relativePath/>
    </parent>

    <!--  可选配置多模块 modules -->
    <properties>

        <maven.compiler.source>8</maven.compiler.source>
        <maven.compiler.target>8</maven.compiler.target>
        <java.version>1.8</java.version>

        <spring-boot>2.2.6.RELEASE</spring-boot>
        <spring-retry>1.3.3</spring-retry>
        <!--<spring-retry>1.2.5.RELEASE</spring-retry>-->
        <spring-thymeleaf>2.3.0.RELEASE</spring-thymeleaf>
        <jakarta-persistence.version>2.2.3</jakarta-persistence.version>
        <mysql.version>8.0.19</mysql.version>
        <com.alibaba.druid>1.1.8</com.alibaba.druid>
        <mybatis.spring.boot>1.3.1</mybatis.spring.boot>
        <org.redisson>3.16.7</org.redisson>
        <org.aspectj.version>1.6.11</org.aspectj.version>
        <org.webjars.jquery>3.3.1</org.webjars.jquery>
        <net.sf.json>2.4</net.sf.json>
        <com.alibaba.fastjson>1.2.58</com.alibaba.fastjson>
        <commons-io>2.6</commons-io>
        <commons-lang3>3.10</commons-lang3>
        <com.google.guava>30.1.1-jre</com.google.guava>
        <org.projectlombok>1.18.20</org.projectlombok>
        <janino.version>3.1.2</janino.version>
        <junit.version>4.12</junit.version>

        <org.jsoup>1.11.3</org.jsoup>
        <us.codecraft.xsoup>0.3.1</us.codecraft.xsoup>
        <us.codecraft.webmagic-core>0.7.3</us.codecraft.webmagic-core>
        <us.codecraft.webmagic-extension>0.7.3</us.codecraft.webmagic-extension>
        <org.seleniumhq.selenium.java>3.141.59</org.seleniumhq.selenium.java>
        <org.webjars.npm.phantomjs>2.1.7</org.webjars.npm.phantomjs>
        <com.codeborne.phantomjsdriver>1.4.0</com.codeborne.phantomjsdriver>

        <okhttp3.version>3.14.7</okhttp3.version>
        <webjars-locator-core.version>0.41</webjars-locator-core.version>
        <com.github.excel4j>3.0.0</com.github.excel4j>

    </properties>

    <dependencies>
        <!-- springstarter start -->

        <!-- web -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
            <version>${spring-boot}</version>
        </dependency>
        <!-- 重试 -->
        <dependency>
            <groupId>org.springframework.retry</groupId>
            <artifactId>spring-retry</artifactId>
            <version>${spring-retry}</version>
        </dependency>
        <!-- 数据校验 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-validation</artifactId>
            <version>${spring-boot}</version>
        </dependency>
        <!-- 邮件 -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-mail</artifactId>
            <version>${spring-boot}</version>
        </dependency>
        <!-- thymeleaf 模板 start -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
            <version>${spring-thymeleaf}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-freemarker</artifactId>
            <version>${spring-boot}</version>
        </dependency>
        <!-- thymeleaf 模板 end -->

        <!-- 缓存 -->
        <!--<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-cache</artifactId>
        </dependency>-->

        <!-- redis -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-redis</artifactId>
            <version>${spring-boot}</version>
        </dependency>


        <!-- convert -->
        <dependency>
            <groupId>jakarta.persistence</groupId>
            <artifactId>jakarta.persistence-api</artifactId>
            <version>${jakarta-persistence.version}</version>
        </dependency>

        <!-- config配置文件读到类 -->
        <!-- NOTICE 配置要用去掉parent的时候报错，由于parent会自动导入这个  -->
        <!--
        异常信息
        Error processing condition on org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration.persistenceExceptionTranslationPostProcessor
        -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-autoconfigure</artifactId>
            <version>${spring-boot}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-configuration-processor</artifactId>
            <!--<optional>true</optional>-->
            <version>${spring-boot}</version>
        </dependency>

        <!-- feign start -->
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-starter-openfeign</artifactId>
            <version>2.2.8.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.cloud</groupId>
            <artifactId>spring-cloud-openfeign-core</artifactId>
            <version>2.2.8.RELEASE</version>
        </dependency>
        <dependency>
            <groupId>io.github.openfeign</groupId>
            <artifactId>feign-httpclient</artifactId>
            <version>11.2</version>
        </dependency>
        <!-- feign end -->

        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpclient</artifactId>
            <version>4.5.12</version>
        </dependency>
        <dependency>
            <groupId>org.apache.httpcomponents</groupId>
            <artifactId>httpmime</artifactId>
            <version>4.5.12</version>
        </dependency>


        <!-- 数据库相关starter start-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-data-jdbc</artifactId>
            <version>${spring-boot}</version>
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-jdbc</artifactId>
            <version>${spring-boot}</version>
        </dependency>
        <dependency>
            <groupId>mysql</groupId>
            <artifactId>mysql-connector-java</artifactId>
            <version>${mysql.version}</version>
            <!--<scope>runtime</scope>-->
        </dependency>
        <!-- 数据库相关starter end-->

        <!--<dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
            &lt;!&ndash;<version>5.2.2.RELEASE</version>&ndash;&gt;
        </dependency>-->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-security</artifactId>
            <version>${spring-boot}</version>
        </dependency>

        <!-- springspringstarter end -->

        <!-- 数据库相关 start -->
        <!--引入druid-->
        <!-- https://mvnrepository.com/artifact/com.alibaba/druid -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>druid</artifactId>
            <version>${com.alibaba.druid}</version>
        </dependency>
        <!-- 引入mybatis 外部定义的start -->
        <dependency>
            <groupId>org.mybatis.spring.boot</groupId>
            <artifactId>mybatis-spring-boot-starter</artifactId>
            <version>${mybatis.spring.boot}</version>
        </dependency>

        <!--  -->
        <!-- https://mvnrepository.com/artifact/org.redisson/redisson -->
        <dependency>
            <groupId>org.redisson</groupId>
            <artifactId>redisson</artifactId>
            <version>${org.redisson}</version>
        </dependency>
        <!-- 数据库相关 end -->

        <!-- AOP start -->
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjrt</artifactId>
            <version>${org.aspectj.version}</version>
        </dependency>
        <dependency>
            <groupId>org.aspectj</groupId>
            <artifactId>aspectjweaver</artifactId>
            <version>${org.aspectj.version}</version>
        </dependency>
        <!-- AOP end -->

        <!--引入jquery‐webjar‐‐>在访问的时候只需要写webjars下面资源的名称即可-->
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>jquery</artifactId>
            <version>${org.webjars.jquery}</version>
        </dependency>

        <!-- junit -->
        <!--<dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
        </dependency>-->

        <!-- 解析json start -->
        <!--<dependency>
            <groupId>net.sf.json-lib</groupId>
            <artifactId>json-lib</artifactId>
            <version>${net.sf.json}</version>
            &lt;!&ndash;<classifier>jdk15</classifier>&ndash;&gt;
        </dependency>-->
        <!-- json解析，spring自带的也有，还是用阿里巴巴的好了-->
        <!-- https://mvnrepository.com/artifact/com.alibaba/fastjson -->
        <dependency>
            <groupId>com.alibaba</groupId>
            <artifactId>fastjson</artifactId>
            <version>${com.alibaba.fastjson}</version>
        </dependency>
        <!-- 解析json end -->

        <!-- 封装常用的工具包 start -->
        <!-- utils包 start -->
        <dependency>
            <groupId>commons-io</groupId>
            <artifactId>commons-io</artifactId>
            <version>${commons-io}</version>
        </dependency>

        <!-- 封装的lang包，目前用来校验数据 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>${commons-lang3}</version>
        </dependency>

        <!-- guava -->
        <!-- https://mvnrepository.com/artifact/com.google.guava/guava -->
        <dependency>
            <groupId>com.google.guava</groupId>
            <artifactId>guava</artifactId>
            <version>${com.google.guava}</version>
        </dependency>

        <!-- lombok -->
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
            <version>${org.projectlombok}</version>
            <scope>provided</scope>
        </dependency>

        <!-- utils包 end -->
        <!-- 封装常用的工具包 end -->

        <!-- logback start -->
        <!-- 支持 logback if 判断条件 -->
        <!-- The org.codehaus.janino:commons-compiler:2.6.1 dependency -->
        <!-- will be automatically pulled in by Maven's transitivity rules -->
        <dependency>
            <groupId>org.codehaus.janino</groupId>
            <artifactId>janino</artifactId>
            <version>${janino.version}</version>
        </dependency>
        <!-- logback end -->

        <!-- 自带的也有 -->
        <!--        <dependency>-->
        <!--            <groupId>org.awaitility</groupId>-->
        <!--            <artifactId>awaitility</artifactId>-->
        <!--            <version>3.1.2</version>-->
        <!--            &lt;!&ndash;<scope>test</scope>&ndash;&gt;-->
        <!--        </dependency>-->

        <!-- 爬虫相关 start -->

        <!-- jsoup 解析html文档-->
        <dependency>
            <groupId>org.jsoup</groupId>
            <artifactId>jsoup</artifactId>
            <version>${org.jsoup}</version>
        </dependency>
        <!-- xsoup -->
        <dependency>
            <groupId>us.codecraft</groupId>
            <artifactId>xsoup</artifactId>
            <version>${us.codecraft.xsoup}</version>
        </dependency>

        <!-- webmagic -->
        <dependency>
            <groupId>us.codecraft</groupId>
            <artifactId>webmagic-core</artifactId>
            <version>${us.codecraft.webmagic-core}</version>
            <exclusions>
                <exclusion>
                    <artifactId>slf4j-log4j12</artifactId>
                    <groupId>org.slf4j</groupId>
                </exclusion>
            </exclusions>
        </dependency>
        <dependency>
            <groupId>us.codecraft</groupId>
            <artifactId>webmagic-extension</artifactId>
            <version>${us.codecraft.webmagic-extension}</version>
        </dependency>


        <!-- selenium-java -->
        <dependency>
            <groupId>org.seleniumhq.selenium</groupId>
            <artifactId>selenium-java</artifactId>
            <version>${org.seleniumhq.selenium.java}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/com.squareup.okhttp3/okhttp -->
        <dependency>
            <groupId>com.squareup.okhttp3</groupId>
            <artifactId>okhttp</artifactId>
            <version>${okhttp3.version}</version>
        </dependency>

        <!--Webjars版本定位工具（前端）-->
        <dependency>
            <groupId>org.webjars</groupId>
            <artifactId>webjars-locator-core</artifactId>
            <version>${webjars-locator-core.version}</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.webjars.npm/phantomjs -->
        <!--<dependency>
            <groupId>org.webjars.npm</groupId>
            <artifactId>phantomjs</artifactId>
            <version>${org.webjars.npm.phantomjs}</version>
            <exclusions>
                <exclusion>
                    <artifactId>slf4j-log4j12</artifactId>
                    <groupId>org.slf4j</groupId>
                </exclusion>
            </exclusions>
        </dependency>-->
        <dependency>
            <groupId>com.codeborne</groupId>
            <artifactId>phantomjsdriver</artifactId>
            <version>${com.codeborne.phantomjsdriver}</version>
        </dependency>

        <!-- 爬虫相关 end -->

        <!--<dependency>
            <groupId>javax</groupId>
            <artifactId>javaee-api</artifactId>
            <version>7.0</version>
        </dependency>-->

        <!-- springboot test -->
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-test</artifactId>
            <version>${spring-boot}</version>
            <!--<scope>test</scope>-->
            <exclusions>
                <exclusion>
                    <groupId>org.junit.vintage</groupId>
                    <artifactId>junit-vintage-engine</artifactId>
                </exclusion>
            </exclusions>
        </dependency>

        <!--junit-->
        <dependency>
            <groupId>junit</groupId>
            <artifactId>junit</artifactId>
            <version>${junit.version}</version>
        </dependency>

        <!-- google 二维码 -->
        <!-- https://mvnrepository.com/artifact/com.google.zxing/core -->
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>core</artifactId>
            <version>3.5.0</version>
        </dependency>
        <dependency>
            <groupId>com.google.zxing</groupId>
            <artifactId>javase</artifactId>
            <version>3.5.0</version>
        </dependency>

        <!-- excle -->
        <dependency>
            <groupId>com.github.crab2died</groupId>
            <artifactId>Excel4J</artifactId>
            <version>${com.github.excel4j}</version>
        </dependency>

    </dependencies>
    <!-- 依赖包 -->

    <!-- 许可证 -->
    <licenses>
        <license>
            <name>Apache 2.0</name>
            <url>https://www.apache.org/licenses/LICENSE-2.0.txt</url>
        </license>
    </licenses>

    <!-- 开发者 -->


    <build>
        <resources>
            <resource>
                <directory>${basedir}/src/main/resources</directory>
                <targetPath>${basedir}/target/classes</targetPath>
                <!-- 开启 filtering 会替换静态资源（html|js|...）中使用 ${key:属性名} 占位的属性，可以定义在 pom.xml -> properties -> key  -->
                <filtering>true</filtering>
            </resource>
        </resources>

        <plugins>
            <plugin>
                <groupId>org.springframework.boot</groupId>
                <artifactId>spring-boot-maven-plugin</artifactId>
                <version>${spring-boot}</version>
            </plugin>

            <!-- Please refer to dump files (if any exist) [date].dump, [date]-jvmRun[N].dump and [date].dumpstream. -->
            <!--编译跳过测试文件检查的生命周期-->
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-surefire-plugin</artifactId>
                <configuration>
                    <skip>true</skip>
                </configuration>
            </plugin>

            <!-- 发布docker到服务器 -->
            <!-- 不好用还是要配置compose然后再在服务器更新 -->
            <plugin>
                <groupId>com.spotify</groupId>
                <artifactId>docker-maven-plugin</artifactId>
                <version>1.0.0</version>
                <!--设置maven在install的时候build-->
                <!--<executions>
                    <execution>
                        <id>build-image</id>
                        <phase>install</phase>
                        <goals>
                            <goal>build</goal>
                        </goals>
                    </execution>
                </executions>-->
                <configuration>
                    <imageName>oneforall_imageName</imageName>
                    <baseImage>oneforall_baseImage</baseImage>
                    <!--<maintainer>docker_maven docker_maven@email.com</maintainer>-->
                    <!-- 在服务器根目录测试切换别的目录/root /dockerdirtest -->
                    <workdir>/ROOT</workdir>
                    <cmd>["java", "-version"]</cmd>
                    <!-- ${project.build.finalName}.jar -->
                    <entryPoint>["java", "-jar", "/target/${project.build.finalName}.jar"]</entryPoint>
                    <!--docker服务器上的ip-->
                    <dockerHost>http://ip:port</dockerHost>
                    <exposes>
                        <expose>8080</expose>
                    </exposes>
                    <!-- 这里是复制 jar 包到 docker 容器指定目录配置 -->
                    <resources>
                        <resource>
                            <targetPath>/target</targetPath>
                            <directory>${project.build.directory}</directory>
                            <include>${project.build.finalName}.jar</include>
                        </resource>
                    </resources>
                </configuration>
            </plugin>

        </plugins>
    </build>

    <!-- 多环境打包 -->
    <profiles>
        <profile>
            <id>local</id>
            <!-- 默认 -->
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <deploy.type>local</deploy.type>
            </properties>
        </profile>
        <profile>
            <id>sj</id>
            <properties>
                <deploy.type>sj</deploy.type>
            </properties>
        </profile>
        <profile>
            <id>bdy</id>
            <properties>
                <deploy.type>bdy</deploy.type>
            </properties>
        </profile>
    </profiles>

</project>
